{"version":3,"sources":["config.js","components/Home/index.jsx","dnd-beyond/character.js","dnd-beyond/index.js","components/Dashboard/index.jsx","components/Footer/index.jsx","serviceWorker.js","index.js","components/App/index.jsx"],"names":["config","development","apiURL","apiPort","process","PORT","dndBeyondURL","siteURL","HOST","production","module","exports","Home","react_default","a","createElement","className","Link","to","Component","STAT_ID","constitutionModifier","c","v","stats","filter","s","id","value","Math","floor","hitPoints","levelConstitutions","classes","level","max","baseHitPoints","current","overrideHitPoints","removedHitPoints","temp","temporaryHitPoints","character","avatarUrl","name","api","Axios","create","baseURL","timeout","headers","Content-type","service","get","concat","then","resp","toSlimCharacter","data","characters","ids","Promise","all","map","fixtures","niamh","Dashboard","state","refreshIdx","params","this","refreshNext","bind","setState","characterIDs","getParams","character_ids","split","_this2","DnDBeyond","setInterval","clearInterval","parseSearch","window","location","search","substring","_this3","incrementIndex","newIndex","length","key","src","alt","Footer","showCredits","e","preventDefault","href","onClick","toggleCredits","Boolean","hostname","match","ReactDOM","render","HashRouter","Route","exact","path","component","src_components_Footer","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.87f71729.chunk.js","sourcesContent":["const env = process.env.NODE_ENV || 'development';\n\nconst config = {\n  development: {\n    apiURL: '/',\n    apiPort: process.env.PORT || 3000,\n    dndBeyondURL: 'https://www.dndbeyond.com',\n    siteURL: process.env.HOST || 'http://localhost',\n  },\n  production: {\n    apiURL: 'https://dnd-dashboard-api.herokuapp.com',\n    apiPort: process.env.PORT || 3000,\n    dndBeyondURL: 'https://www.dndbeyond.com',\n    siteURL: process.env.HOST || 'https://dnd.danielmconrad.com'\n  }\n};\n\nmodule.exports = config[env];\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './index.css';\n\nclass Home extends Component {\n  render() {\n    return (\n      <div className=\"Home\">\n        <Link to=\"/dashboard?character_ids=8958758\">Niamh</Link>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","const STAT_ID = {\n  CON: 3,\n};\n\nconst valueToModifier = v => Math.floor((v - 10) / 2);\n\nconst constitutionModifier = c =>\n  valueToModifier(c.stats.filter(s => s.id === STAT_ID.CON)[0].value);\n\nconst hitPoints = c => {\n  const levelConstitutions = constitutionModifier(c) * c.classes[0].level;\n  const max = c.baseHitPoints + levelConstitutions;\n\n  return {\n    current: c.overrideHitPoints || max - c.removedHitPoints,\n    max: c.overrideHitPoints || max,\n    temp: c.temporaryHitPoints,\n  };\n};\n\nconst character = c => ({\n  id: c.id,\n  avatarUrl: c.avatarUrl,\n  name: c.name,\n  hitPoints: hitPoints(c),\n});\n\nexport default character;\n","import Axios from 'axios';\n\nimport toSlimCharacter from './character';\nimport niamh from '../fixtures/niamh.json';\nimport config from '../config';\n\nconst api = Axios.create({\n  baseURL: config.apiURL,\n  timeout: 1000,\n  headers: { 'Content-type': 'application/json; charset=utf-8' },\n});\n\nconst service = {\n  character: id =>\n    api.get(`/character/${id}/json`)\n      .then(resp => toSlimCharacter(resp.data)),\n  \n  characters: ids =>\n    Promise.all(ids.map(id => service.character(id))),\n  \n  fixtures: [\n    toSlimCharacter(niamh)\n  ]\n};\n\nexport default service;\n","import React, { Component } from 'react';\nimport {parse as parseSearch} from 'querystring';\n\nimport DnDBeyond from '../../dnd-beyond';\nimport './index.css';\n\nconst ONE_SECOND = 1000;\n\nclass Dashboard extends Component {\n  state = {\n    characters: [],\n    refreshIdx: 0,\n    params: {},\n  }\n\n  componentWillMount() {\n    this.refreshNext = this.refreshNext.bind(this);\n\n    this.setState({ \n      characterIDs: (this.getParams().character_ids || '').split(',')\n    });\n  }\n\n  componentDidMount() {\n    if (!this.state.characterIDs) return;\n\n    DnDBeyond.characters(this.state.characterIDs)\n      .then(characters => this.setState({ characters }));\n\n    setInterval(this.refreshNext, 30 * ONE_SECOND);\n  }\n  \n  componentWillUnmount() {\n    clearInterval(this.refreshNext);\n  }\n\n  getParams() {\n    return parseSearch(window.location.search.substring(1));\n  }\n\n  refreshNext() {\n    const {characters} = this.state;\n    \n    DnDBeyond.character(this.state.characterIDs[this.state.refreshIdx])\n      .then(character => characters[this.state.refreshIdx] = character)\n      .then(() => this.setState({ characters }))\n      .then(() => this.incrementIndex());\n  }\n\n  incrementIndex() {\n    let newIndex = this.state.refreshIdx + 1;\n\n    this.setState({ \n      refreshIdx: newIndex >= this.state.characters.length ? 0 : newIndex\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"Dashboard\">\n        {this.state.characters.map(character => (\n          <div key={character.id}>\n            <img src={character.avatarUrl} alt={character.name} />\n            <h2>{character.name}</h2>\n            <p>\n              <span className=\"current\">\n                {character.hitPoints.current}\n              </span>\n              /\n              <span className=\"max\">\n                {character.hitPoints.max}\n              </span>\n              <span className=\"temp\">\n                {character.hitPoints.temp && `[${character.hitPoints.temp}]`}\n              </span>\n            </p>\n          </div>\n        ))}\n        {!this.state.characterIDs && (\n          <div>No characters selected!</div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React, { Component } from 'react';\n\nimport './index.css';\n\nclass Footer extends Component {\n  state = {\n    showCredits: false,\n  }\n\n  toggleCredits(e) {\n    e.preventDefault();\n    this.setState({ showCredits: !this.state.showCredits });\n  }\n\n  render() {\n    return (\n      <div className=\"Dashboard\">\n        <a href=\"/\" onClick={(e) => this.toggleCredits(e)}>Credits</a>\n\n        {this.state.showCredits && (\n          <div>\n            <div>Favicon made by <a href=\"https://www.flaticon.com/authors/freepik\">freepik</a> from www.flaticon.com </div>\n            <div>Data supplied by <a href=\"https://www.dndbeyond.com\">D&amp;D Beyond</a></div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Footer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\n\nimport Home from '../Home';\nimport Dashboard from '../Dashboard';\nimport Footer from '../Footer';\n\nimport './index.css';\n\nexport default () => (\n  <HashRouter>\n    <div className=\"App\">\n      <Route exact path=\"/\" component={Home} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Footer />\n    </div>\n  </HashRouter>\n);\n"],"sourceRoot":""}