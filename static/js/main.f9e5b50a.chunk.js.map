{"version":3,"sources":["config.js","components/Header/index.jsx","components/Footer/index.jsx","components/Home/index.jsx","components/Credits/index.jsx","api/character.js","api/index.js","components/Dashboard/index.jsx","serviceWorker.js","index.js","components/App/index.jsx"],"names":["config","development","apiURL","apiPort","process","PORT","dndBeyondURL","siteURL","HOST","production","module","exports","components_Header","react_default","a","createElement","className","Link","to","components_Footer","Home","Component","components_Credits","href","STAT_ID","constitutionModifier","c","v","stats","filter","s","id","value","Math","floor","hitPoints","levelConstitutions","classes","level","max","baseHitPoints","bonusHitPoints","current","overrideHitPoints","removedHitPoints","temp","temporaryHitPoints","character","avatarUrl","name","baseAPI","Axios","create","baseURL","timeout","headers","Content-type","api","get","concat","then","resp","toSlimCharacter","data","characters","ids","Promise","all","map","fixtures","niamh","Dashboard","state","refreshIdx","params","this","refreshNext","bind","setState","characterIDs","props","match","split","_this2","setInterval","clearInterval","_this3","incrementIndex","newIndex","length","key","src","alt","Boolean","window","location","hostname","ReactDOM","render","HashRouter","Route","exact","path","component","Credits","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f9e5b50a.chunk.js","sourcesContent":["const env = process.env.NODE_ENV || 'development';\n\nconst config = {\n  development: {\n    apiURL: '/',\n    apiPort: process.env.PORT || 3000,\n    dndBeyondURL: 'https://www.dndbeyond.com',\n    siteURL: process.env.HOST || 'http://localhost',\n  },\n  production: {\n    apiURL: 'https://dnd-dashboard-api.herokuapp.com',\n    apiPort: process.env.PORT || 3000,\n    dndBeyondURL: 'https://www.dndbeyond.com',\n    siteURL: process.env.HOST || 'https://dnd.danielmconrad.com'\n  }\n};\n\nmodule.exports = config[env];\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './index.css';\n\nexport default () => (\n  <div className=\"Header\">\n    <Link to=\"/\">Home</Link>\n  </div>\n);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './index.css';\n\nexport default () => (\n  <div className=\"Footer\">\n    <Link to=\"/credits\">Credits</Link>\n  </div>\n);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './index.css';\n\nclass Home extends Component {\n  render() {\n    return (\n      <div className=\"Home\">\n        <Link to=\"/dashboard/8958758\">Sample Dashboard</Link>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport './index.css';\n\nexport default () => (\n  <div className=\"Credits\">\n    <div>Favicon made by <a href=\"https://www.flaticon.com/authors/freepik\">freepik</a> from www.flaticon.com </div>\n    <div>Data supplied by <a href=\"https://www.dndbeyond.com\">D&amp;D Beyond</a></div>\n  </div>\n);\n","const STAT_ID = {\n  CON: 3,\n};\n\nconst valueToModifier = v => Math.floor((v - 10) / 2);\n\nconst constitutionModifier = c =>\n  valueToModifier(c.stats.filter(s => s.id === STAT_ID.CON)[0].value);\n\nconst hitPoints = c => {\n  const levelConstitutions = constitutionModifier(c) * c.classes[0].level;\n  const max = c.baseHitPoints + c.bonusHitPoints + levelConstitutions;\n\n  return {\n    current: c.overrideHitPoints || max - c.removedHitPoints,\n    max: c.overrideHitPoints || max,\n    temp: c.temporaryHitPoints ? c.temporaryHitPoints : null,\n  };\n};\n\nconst character = c => ({\n  id: c.id,\n  avatarUrl: c.avatarUrl,\n  name: c.name,\n  hitPoints: hitPoints(c),\n});\n\nexport default character;\n","import Axios from 'axios';\n\nimport toSlimCharacter from './character';\nimport niamh from '../fixtures/niamh.json';\nimport config from '../config';\n\nconst baseAPI = Axios.create({\n  baseURL: config.apiURL,\n  timeout: 10000,\n  headers: { 'Content-type': 'application/json; charset=utf-8' },\n});\n\nconst api = {\n  character: id =>\n    baseAPI.get(`/character/${id}/json`)\n      .then(resp => toSlimCharacter(resp.data)),\n  \n  characters: ids =>\n    Promise.all(ids.map(id => api.character(id))),\n  \n  fixtures: [\n    toSlimCharacter(niamh)\n  ]\n};\n\nexport default api;\n","import React, { Component } from 'react';\n\nimport api from '../../api';\nimport './index.css';\n\nconst ONE_SECOND = 1000;\n\nclass Dashboard extends Component {\n  state = {\n    characters: [],\n    refreshIdx: 0,\n    params: {},\n  }\n\n  componentWillMount() {\n    this.refreshNext = this.refreshNext.bind(this);\n\n    this.setState({ \n      characterIDs: (this.props.match.params.characterIDs || '').split(',')\n    });\n  }\n\n  componentDidMount() {\n    if (!this.state.characterIDs) return;\n\n    api.characters(this.state.characterIDs)\n      .then(characters => this.setState({ characters }));\n\n    setInterval(this.refreshNext, 30 * ONE_SECOND);\n  }\n  \n  componentWillUnmount() {\n    clearInterval(this.refreshNext);\n  }\n\n  refreshNext() {\n    const {characters} = this.state;\n    \n    api.character(this.state.characterIDs[this.state.refreshIdx])\n      .then(character => characters[this.state.refreshIdx] = character)\n      .then(() => this.setState({ characters }))\n      .then(() => this.incrementIndex());\n  }\n\n  incrementIndex() {\n    let newIndex = this.state.refreshIdx + 1;\n\n    this.setState({ \n      refreshIdx: newIndex >= this.state.characters.length ? 0 : newIndex\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"Dashboard\">\n        {this.state.characters.map(character => (\n          <div key={character.id}>\n            <img src={character.avatarUrl} alt={character.name} />\n            <h2>{character.name}</h2>\n            <p>\n              <span className=\"current\">\n                {character.hitPoints.current}\n              </span>\n              /\n              <span className=\"max\">\n                {character.hitPoints.max}\n              </span>\n              <span className=\"temp\">\n                {character.hitPoints.temp && `[${character.hitPoints.temp}]`}\n              </span>\n            </p>\n          </div>\n        ))}\n        {!this.state.characterIDs && (\n          <div>No characters selected!</div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\n\nimport Header from '../Header';\nimport Footer from '../Footer';\nimport Home from '../Home';\nimport Credits from '../Credits';\nimport Dashboard from '../Dashboard';\n\nimport './index.css';\n\nexport default () => (\n  <HashRouter>\n    <div className=\"App\">\n      <Header />\n      <Route exact path=\"/\" component={Home} />\n      <Route path=\"/credits\" component={Credits} />\n      <Route path=\"/dashboard/:characterIDs\" component={Dashboard} />\n      <Footer />\n    </div>\n  </HashRouter>\n);\n"],"sourceRoot":""}